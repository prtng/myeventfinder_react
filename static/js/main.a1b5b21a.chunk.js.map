{"version":3,"sources":["components/layout/Header.js","components/events/Event.js","actions/eventActions.js","actions/types.js","components/events/Events.js","components/layout/TextInputGroup.js","components/events/AddEvent.js","reducers/eventReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","to","Component","Event","state","showEventInfo","onDeleteClick","id","console","log","props","deleteEvent","this","event","name","date","details","onClick","setState","style","cursor","Moment","format","bind","connect","dispatch","a","axios","delete","type","payload","Events","getEvents","events","Fragment","map","key","get","res","data","TextInputGroup","label","value","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddEvent","Date","errors","onSubmit","e","preventDefault","newEvent","addEvent","history","push","target","minDate","dateFormat","timeFormat","post","response","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","latency","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a1b5b21a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-info mb-3 py-0\">\r\n        <div className=\"container\">\r\n          <a href=\"/\" className=\"navbar-brand\">\r\n            <h1 className=\"display-4\">Event Finder</h1>\r\n          </a>\r\n          <div>\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item mr-5\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  <h5 className=\"text-white\">Home</h5>\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item mr-5\">\r\n                <Link to=\"/event/add\" className=\"nav-link\">\r\n                  <h5 className=\"text-white\">Create Event</h5>\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteEvent } from '../../actions/eventActions';\r\nimport Moment from 'moment';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showEventInfo: true,\r\n  };\r\n\r\n  onDeleteClick = (id) => {\r\n    console.log(id);\r\n    this.props.deleteEvent(id);\r\n  };\r\n\r\n  render() {\r\n    const { id, name, date, details } = this.props.event;\r\n    const { showEventInfo } = this.state;\r\n\r\n    return (\r\n      <div className=\"card mb-3\">\r\n        <h5 className=\"card-header\">\r\n          {name}{' '}\r\n          <i\r\n            onClick={() =>\r\n              this.setState({\r\n                showEventInfo: !this.state.showEventInfo,\r\n              })\r\n            }\r\n            className=\"fas fa-sort-down\"\r\n            style={{ cursor: 'pointer' }}\r\n          />\r\n        </h5>\r\n        {showEventInfo ? (\r\n          <div className=\"card-body\">\r\n            <p className=\"card-text\">\r\n              <u>\r\n                <b>To be conducted on:</b>\r\n              </u>{' '}\r\n              {Moment(date).format('dddd, MMMM Do YYYY, h:mm:ss a')}\r\n            </p>\r\n            <p className=\"card-text\">\r\n              <u>\r\n                <b>Details:</b>\r\n              </u>{' '}\r\n              {details}\r\n            </p>\r\n            <a\r\n              href=\"#\"\r\n              className=\"btn btn-outline-danger\"\r\n              onClick={this.onDeleteClick.bind(this, id)}\r\n            >\r\n              Delete\r\n            </a>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEvent.propTypes = {\r\n  event: PropTypes.object.isRequired,\r\n  deleteEvent: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { deleteEvent })(Event);\r\n","import { GET_EVENTS, DELETE_EVENT, ADD_EVENT } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getEvents = () => async (dispatch) => {\r\n  const res = await axios.get(\r\n    'https://my-json-server.typicode.com/prtng/eventfinderjson/events'\r\n  );\r\n  dispatch({\r\n    type: GET_EVENTS,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\nexport const deleteEvent = (id) => async (dispatch) => {\r\n  await axios.delete(\r\n    `https://my-json-server.typicode.com/prtng/eventfinderjson/events/${id}`\r\n  );\r\n  dispatch({\r\n    type: DELETE_EVENT,\r\n    payload: id,\r\n  });\r\n};\r\n\r\nexport const addEvent = (event) => async (dispatch) => {\r\n  /* This try-catch block is not necessary. Since we are using mock rest api, \r\n     if we try to delete any event other than those present in the JSON we will \r\n     get 404 error.\r\n  */\r\n  const response = await axios.post(\r\n    'https://my-json-server.typicode.com/prtng/eventfinderjson/events',\r\n    event\r\n  );\r\n  dispatch({\r\n    type: ADD_EVENT,\r\n    payload: response.data,\r\n  });\r\n};\r\n","export const GET_EVENTS = 'GET_EVENTS';\r\nexport const ADD_EVENT = 'ADD_EVENT';\r\nexport const DELETE_EVENT = 'DELETE_EVENT';\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getEvents } from '../../actions/eventActions';\r\n\r\nclass Events extends Component {\r\n  componentDidMount() {\r\n    this.props.getEvents();\r\n  }\r\n\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"display-4 mb-2\">\r\n          <span className=\"text-info\">Event</span> List\r\n        </h1>\r\n        {events.map((event) => (\r\n          <Event key={event.id} event={event} />\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nEvents.propTypes = {\r\n  events: PropTypes.array.isRequired,\r\n  getEvents: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  events: state.event.events,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getEvents })(Events);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error,\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\n\nTextInputGroup.defaultProps = {\n  type: 'text',\n};\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addEvent } from '../../actions/eventActions';\r\nimport DateTimePicker from 'react-datetime-picker';\r\n\r\nclass AddEvent extends Component {\r\n  state = {\r\n    id: '',\r\n    name: '',\r\n    date: new Date(),\r\n    details: '',\r\n    errors: {},\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, date, details } = this.state;\r\n\r\n    // Check For Errors\r\n    if (name === '') {\r\n      this.setState({ errors: { name: 'Name is required' } });\r\n      return;\r\n    }\r\n\r\n    if (date === '') {\r\n      this.setState({ errors: { date: 'Date is required' } });\r\n      return;\r\n    }\r\n\r\n    if (details === '') {\r\n      this.setState({ errors: { details: 'Details are required' } });\r\n      return;\r\n    }\r\n\r\n    const newEvent = {\r\n      name,\r\n      date,\r\n      details,\r\n    };\r\n\r\n    //// SUBMIT EVENT ////\r\n    this.props.addEvent(newEvent);\r\n\r\n    // Clear State\r\n    this.setState({\r\n      name: '',\r\n      date: '',\r\n      details: '',\r\n      errors: {},\r\n    });\r\n\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, date, details, errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"card mb-3\">\r\n        <div className=\"card-header\">Add Event</div>\r\n        <div className=\"card-body\">\r\n          <form onSubmit={this.onSubmit}>\r\n            <TextInputGroup\r\n              label=\"Name\"\r\n              name=\"name\"\r\n              placeholder=\"Enter Name\"\r\n              value={name}\r\n              onChange={this.onChange}\r\n              error={errors.name}\r\n            />\r\n            {/* <TextInputGroup\r\n              label=\"Date\"\r\n              name=\"date\"\r\n              placeholder=\"Enter Date\"\r\n              value={date}\r\n              onChange={this.onChange}\r\n              error={errors.date}\r\n            /> */}\r\n            <div className=\"form-group\">\r\n              <label htmlFor={date}>Date:</label>\r\n              <DateTimePicker\r\n                onChange={(date) => this.setState({ date })}\r\n                value={this.state.date}\r\n                className=\"form-control form-control-lg\"\r\n                minDate={new Date()}\r\n                dateFormat=\"dddd, MMMM Do YYYY\"\r\n                timeFormat=\"h:mm:ss a\"\r\n              />\r\n            </div>\r\n            <TextInputGroup\r\n              label=\"Details\"\r\n              name=\"details\"\r\n              placeholder=\"Enter Details\"\r\n              value={details}\r\n              onChange={this.onChange}\r\n              error={errors.details}\r\n            />\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Add Event\"\r\n              className=\"btn btn-block btn-outline-info\"\r\n              style={{ cursor: 'pointer' }}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddEvent.propTypes = {\r\n  addEvent: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addEvent })(AddEvent);\r\n","import { GET_EVENTS, DELETE_EVENT, ADD_EVENT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  events: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_EVENTS:\r\n      return { ...state, events: action.payload };\r\n    case DELETE_EVENT:\r\n      return {\r\n        ...state,\r\n        events: state.events.filter((event) => event.id != action.payload),\r\n      };\r\n    case ADD_EVENT:\r\n      return {\r\n        ...state,\r\n        events: [action.payload, ...state.events],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport eventReducer from './eventReducer';\r\n\r\nexport default combineReducers({\r\n  event: eventReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION__({\r\n        latency: 0,\r\n      })\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'; // Changed from BrowserRouter to HashRouter so that we can navigate through app links once deployed on git hub.\nimport Header from './components/layout/Header';\nimport Events from './components/events/Events';\nimport AddEvent from './components/events/AddEvent';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Events} />\n                <Route exact path=\"/event/add\" component={AddEvent} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}